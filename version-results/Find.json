{
  "stringified": "Find | connection,collection,query,options | result | IMPLICIT | NONE\nasync ({ host, port, database, user, password }, { connection }) => {\n    const { Client } = await import(\"pg\");\n    const client = new Client({\n      host,\n      port,\n      database,\n      user,\n      password,\n    });\n    await client.connect();\n    connection.next(client);\n  }",
  "original": {
    "id": "Find",
    "defaultStyle": {
      "icon": "fa-database"
    },
    "namespace": "MongoDB",
    "description": "Queries a Mongo database. Find receives a valid \"mongodb\" FindOptions object.",
    "inputs": {
      "connection": {
        "description": "Mongo connection"
      },
      "collection": {
        "description": "Collection"
      },
      "query": {
        "description": "Query"
      },
      "options": {
        "description": "Options"
      }
    },
    "outputs": {
      "result": {
        "description": ""
      }
    },
    "runFnString": "async ({ host, port, database, user, password }, { connection }) => {\n    const { Client } = await import(\"pg\");\n    const client = new Client({\n      host,\n      port,\n      database,\n      user,\n      password,\n    });\n    await client.connect();\n    connection.next(client);\n  }"
  },
  "alternativeFunction": "function (inputs, outputs, adv) {\n  const { hostName, portNumber, dbName, userName, password } = inputs;\n  const { connection } = outputs;\n\n  const { Client } = await import(\"pg\");\n  const client = new Client({\n    host: hostName,\n    port: portNumber,\n    database: dbName,\n    user: userName,\n    password: password,\n  });\n  await client.connect();\n  connection.next(client);\n}",
  "alternativeMetaData": "DB Connection | hostName,portNumber,dbName,userName,password | connection | IMPLICIT | NONE",
  "prompts": [
    "Database connection initializer",
    "Initialize database connection",
    "Create database connection",
    "Connect to database"
  ],
  "tokensUsed": 925
}